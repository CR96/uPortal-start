import java.nio.file.Paths

/*
 * Loads the buildProperties collection during the Gradle initialization phase.
 */
def loadBuildProperties = {
    /*
     * The Properties object we need to load already exists.
     */
    Properties buildProperties = rootProject.ext['buildProperties']

    /*
     * Start with buildDefaults.properties from the classpath.
     */
    InputStream defaults = this.getClass().getClassLoader().getResourceAsStream('buildDefaults.properties')
    if (defaults == null) {
        // The defaults.properties is missing;  this situation is untenable
        throw new GradleScriptException('buildDefaults.properties file not found')
    }
    buildProperties.load(defaults)

    /*
     * The next layer is build.properties in the root directory of the
     * project;  but it's not required.
     */
    def buildPropsFile = file('build.properties')
    if (buildPropsFile.exists()) {
        // Anything in here trumps what we loaded earlier...
        Properties localBuildProps = new Properties()
        buildPropsFile.withInputStream { localBuildProps.load(it) }
        localBuildProps.forEach { key, value ->
            buildProperties.setProperty(key, value)
        }
    } else {
        logger.lifecycle('No build.properties file found;  continuing with default build settings')
    }

    /*
     * The final layer is JVM arguments;  anything you specify on the
     * command line will be honored over both the default & local
     * settings.
     */
    buildProperties.forEach { key, value ->
        String jvmArgValue = System.getProperty(key);
        if (jvmArgValue) {
            logger.lifecycle("Found JVM override value of '${jvmArgValue}' for build property '${key}'")
            buildProperties.setProperty(key, jvmArgValue)
        }
    }

    /*
     * Configure server.home and server.base
     * 1. If the property is empty, set it to be the root of uPortal-start directory\/.gradle\/tomcat
     * 2. If the property is a OS environmental variable, find and use it
     * 3. If the property doesn't start with a \/ assume it belongs in the root of uPortal-start directory
     */
    String serverHome = rootProject.ext['buildProperties'].getProperty('server.home')
    if (serverHome.isEmpty()) {
        serverHome = Paths.get(rootDir.toString(), '.gradle', 'tomcat')
    } else if (serverHome.startsWith('\$')) {
        serverHome = System.getenv(serverHome.replace('\$', ''))
    } else if (!(new File(serverHome)).isAbsolute() && !serverHome.startsWith('~')) {
        serverHome = Paths.get(rootDir.toString(), serverHome)
    } else if (serverHome.startsWith('~')) {
        serverHome = serverHome.replaceFirst('^~', System.getProperty('user.home'))
    }
    buildProperties.setProperty('server.home', serverHome)

    String serverBase = project.rootProject.ext['buildProperties'].getProperty('server.base')
    if (serverBase.isEmpty()) {
        serverBase = Paths.get(rootDir.toString(), '.gradle', 'tomcat')
    } else if (serverBase.startsWith('\$')) {
        serverBase = System.getenv(serverBase.replace('\$', ''))
    } else if (!(new File(serverBase)).isAbsolute() && !serverBase.startsWith('~')) {
        serverBase = Paths.get(rootDir.toString(), serverHome)
    } else if (serverHome.startsWith('~')) {
        serverBase = serverBase.replaceFirst('^~', System.getProperty('user.home'))
    }
    buildProperties.setProperty('server.base', serverBase)

    /*
     * And lastly, we MUST have a 'portal.home' property.  That can happen in the following ways
     * (listed in order of priority):
     *
     *   - Already defined (build.properties or a JVM argument)
     *   - Value of the PORTAL_HOME environment variable
     *   - The uPortal default, which is "${server.base}/portal"
     */
    if (!buildProperties.containsKey('portal.home')) {
        String portalHome = System.getenv('PORTAL_HOME') ?: "${buildProperties.getProperty('server.base')}/portal"
        buildProperties.setProperty('portal.home', portalHome)
    }

    /*
     * List the complete set of build properties to the console.
     */
    logger.lifecycle('Using the following build properties:')
    buildProperties.forEach { key, value ->
        logger.lifecycle("  -> ${key}=${value}")
    }

}()
