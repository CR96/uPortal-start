buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.scaldingspoon.gradle:gradle-waroverlay-plugin:${waroverlayPluginVersion}"
    }
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'waroverlay'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    buildscript {
        repositories {
            jcenter()
        }
        dependencies {
            classpath "org.scaldingspoon.gradle:gradle-waroverlay-plugin:${waroverlayPluginVersion}"
        }
    }

    warOverlay {
        // Include the jar files in the WAR (default is false).
        includeWarJars true
    }

    configurations {
        war {}
        jdbc
        shell
    }

    dependencies {
        jdbc "org.hsqldb:hsqldb:${hsqldbVersion}"

        /*
         * These are nearly the same uPortal dependencies declared by uPortal-webapp;
         * perhaps we should create a uPortal-all module to bundle them all as transitives.
         */
        shell "org.jasig.portal:uPortal-api-platform:${uPortalVersion}"
        shell "org.jasig.portal:uPortal-groups-filesystem:${uPortalVersion}"
        shell "org.jasig.portal:uPortal-groups-grouper:${uPortalVersion}"
        shell "org.jasig.portal:uPortal-groups-ldap:${uPortalVersion}"
        shell "org.jasig.portal:uPortal-groups-local:${uPortalVersion}"
        shell "org.jasig.portal:uPortal-groups-smartldap:${uPortalVersion}"
        shell "org.jasig.portal:uPortal-portlets:${uPortalVersion}"
        shell "org.jasig.portal:uPortal-security-authn:${uPortalVersion}"
        shell "org.jasig.portal:uPortal-security-xslt:${uPortalVersion}"
        shell "org.jasig.portal:uPortal-soffit-connector:${uPortalVersion}"
        shell "org.jasig.portal:uPortal-utils-jmx:${uPortalVersion}"

        shell portletApiDependency
        shell servletApiDependency

        shell "org.apache.portals.pluto:pluto-container-driver-api:${plutoVersion}"
        shell "javax.ccpp:ccpp:${ccppVersion}"
    }

    artifacts {
        war tasks.war
    }

    task expandedWar(type: Copy, dependsOn: 'war') {
        from zipTree("${project.buildDir}/libs/${project.name}.war")
        into "${buildDir}/${project.name}"
    }

}
