import org.apereo.portal.start.gradle.plugins.GradleImportExportPlugin
import org.apereo.portal.start.gradle.plugins.GradlePlutoPlugin

apply plugin: GradleImportExportPlugin
apply plugin: GradlePlutoPlugin

dependencies {
    runtime "org.jasig.portal:uPortal-webapp:${uPortalVersion}@war"
}

war {
    archiveName 'uPortal.war'
}

/*
 * Import/Export Support
 */

import org.apereo.portal.start.shell.PortalShellInvoker

ext {
    shellDir = new File("${buildDir}/shell")
    defaultBaseEntitiesLocation = "${rootProject.projectDir}/data/base"
    defaultImplementationEntitiesLocation = "${rootProject.projectDir}/data/quickstart"
}

dataInit {
    dependsOn ':loadBuildProps'
    /*
     * Add to the scriptFile commands that drop then create then load the legacy database
     * tables and data (i.e. non-Hibernate stuff that's still based on tables.xml and data.xml)
     */
    doLast {
        String tablesFile = '/properties/db/tables.xml'
        String dataFile = '/properties/db/data.xml'
        boolean droptables = true
        boolean createtables = true
        boolean populatetables = true

        shellDir.mkdirs()

        File scriptFile = new File(shellDir, 'dataInit.groovy')
        scriptFile.delete()  // Clear from previous invocation, if present
        scriptFile.append(
"""
//db(String target, String tablesFile, String dataFile, String scriptFile, boolean dropTables, boolean createTables, boolean populateTables)
portalShellBuildHelper.db('db',
    '${tablesFile}', '${dataFile}', ' ',
    ${droptables}, ${createtables}, ${populatetables});
"""     )
    }
    /*
     * Add to the scriptFile commands that drop then create the Hibernate-managed tables.
     */
    doLast {
        boolean export = true
        String outputFile = ' '

        File scriptFile = new File(shellDir, 'dataInit.groovy')
        ['PortalDb', 'RawEventsDb', 'AggrEventsDb'].each { databaseQualifier ->
            scriptFile.append(
"""
//hibernateDrop(String target, String databaseQualifier, boolean export, String outputFile)
portalShellBuildHelper.hibernateDrop('db-hibernate',
    '${databaseQualifier}',
    ${export},
    /${outputFile}/);
//hibernateCreate(String target, String databaseQualifier, boolean export, String outputFile)
portalShellBuildHelper.hibernateCreate('db-hibernate',
    '${databaseQualifier}',
    ${export},
    /${outputFile}/);
"""         )
        }
    }
    /*
     * Add to the scriptFile commands that import database entities in
     * the folder defined by the 'base.entities.location' build property.
     */
    doLast {
        String baseEntitiesLocation = buildProps.getProperty('base.entities.location') ?: defaultBaseEntitiesLocation
        String implementationEntitiesLocation = buildProps.getProperty('implementation.entities.location') ?: defaultImplementationEntitiesLocation

        String pattern = ' '
        String file = ' '
        String archive = ' '
        String files = ' '
        String filesListFile = ' '

        File scriptFile = new File(shellDir, 'dataInit.groovy')
        [ baseEntitiesLocation, implementationEntitiesLocation ].each { entitiesLocation ->
            scriptFile.append(
"""
//dataImport(String target, String dataDir, String pattern, String filesList, String archive, String logDir)
portalShellBuildHelper.dataImport('data-import',
    '${entitiesLocation}',
    '${pattern}',
    portalShellBuildHelper.getFilesListStringFromInput('${file}', '${files}', '${filesListFile}'),
    '${archive}',
    '${buildDir}');
"""         )
        }
    }
    /*
     * Execute the commands in the scriptFile.
     */
    doLast {
        File scriptFile = new File(shellDir, 'dataInit.groovy')
        PortalShellInvoker psi = new PortalShellInvoker()
        psi.invoke(project, scriptFile.getAbsolutePath())
    }
}
